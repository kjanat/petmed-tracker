// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Pet medication tracking relationships
    userPets        UserPet[]
    medicationLogs  MedicationLog[]
    foodLogs        FoodLog[]
}

// Pet Management
model Pet {
    id          String    @id @default(cuid())
    name        String
    species     String?   // dog, cat, bird, etc.
    breed       String?
    birthDate   DateTime?
    weight      Float?
    notes       String?
    qrCodeId    String    @unique @default(cuid()) // For QR code URLs
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relationships
    userPets        UserPet[]
    medications     Medication[]
    foodSchedules   FoodSchedule[]
}

model UserPet {
    id        String   @id @default(cuid())
    userId    String
    petId     String
    role      String   @default("owner") // owner, caregiver
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@unique([userId, petId])
}

// Medication Management
model Medication {
    id           String    @id @default(cuid())
    petId        String
    name         String
    dosage       String?   // "5mg", "1 tablet", etc.
    unit         String?   // "ml", "tablets", "drops"
    instructions String?
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    pet                Pet                 @relation(fields: [petId], references: [id], onDelete: Cascade)
    schedules          MedicationSchedule[]
    logs               MedicationLog[]
}

model MedicationSchedule {
    id            String   @id @default(cuid())
    medicationId  String
    scheduleType  String   // "daily", "weekly", "custom"
    times         String   // JSON array of times ["08:00", "20:00"]
    daysOfWeek    String?  // JSON array [1,2,3,4,5] for Mon-Fri
    startDate     DateTime @default(now())
    endDate       DateTime?
    isActive      Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
}

model MedicationLog {
    id             String    @id @default(cuid())
    medicationId   String
    scheduledTime  DateTime  // When it was supposed to be given
    actualTime     DateTime? // When it was actually given
    givenByUserId  String?   // Who gave it
    notes          String?
    status         String    @default("pending") // "given", "missed", "skipped", "pending"
    createdAt      DateTime  @default(now())

    medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
    givenBy    User?      @relation(fields: [givenByUserId], references: [id])
}

// Food Scheduling (Optional)
model FoodSchedule {
    id           String    @id @default(cuid())
    petId        String
    times        String    // JSON array of times ["07:00", "19:00"]
    amount       String?   // "1 cup", "50g", etc.
    unit         String?   // "cups", "grams", etc.
    foodType     String    // Required field
    instructions String?
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    pet  Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
    logs FoodLog[]
}

model FoodLog {
    id             String       @id @default(cuid())
    foodScheduleId String
    scheduledTime  DateTime
    actualTime     DateTime?
    fedByUserId    String?
    notes          String?
    status         String       @default("pending") // "fed", "missed", "skipped", "pending"
    createdAt      DateTime     @default(now())

    foodSchedule FoodSchedule @relation(fields: [foodScheduleId], references: [id], onDelete: Cascade)
    fedBy        User?        @relation(fields: [fedByUserId], references: [id])
}
